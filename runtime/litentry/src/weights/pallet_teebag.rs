// Copyright 2020-2024 Trust Computing GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_teebag
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-07-31, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `azure-dev-2`, CPU: `Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("litentry-dev"), DB CACHE: 20

// Executed Command:
// ./target/release/litentry-collator
// benchmark
// pallet
// --chain=litentry-dev
// --execution=wasm
// --db-cache=20
// --wasm-execution=compiled
// --pallet=pallet_teebag
// --extrinsic=*
// --heap-pages=4096
// --steps=50
// --repeat=20
// --header=./LICENSE_HEADER
// --template=./templates/benchmark/pallet-weight-template.hbs
// --output=./runtime/litentry/src/weights/pallet_teebag.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for pallet_teebag using the Substrate node and recommended hardware.
pub struct LitentryWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_teebag::WeightInfo for LitentryWeight<T> {
	/// Storage: Teebag EnclaveRegistry (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag EnclaveIdentifier (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveIdentifier (max_values: None, max_size: None, mode: Measured)
	fn force_add_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213`
		//  Estimated: `3678`
		// Minimum execution time: 21_166_000 picoseconds.
		Weight::from_parts(21_483_000, 3678)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Teebag EnclaveRegistry (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag EnclaveIdentifier (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveIdentifier (max_values: None, max_size: None, mode: Measured)
	fn force_remove_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `541`
		//  Estimated: `4006`
		// Minimum execution time: 26_152_000 picoseconds.
		Weight::from_parts(26_676_000, 4006)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Teebag EnclaveRegistry (r:4 w:3)
	/// Proof Skipped: Teebag EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag EnclaveIdentifier (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveIdentifier (max_values: None, max_size: None, mode: Measured)
	fn force_remove_enclave_by_mrenclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `720`
		//  Estimated: `11610`
		// Minimum execution time: 67_634_000 picoseconds.
		Weight::from_parts(68_705_000, 11610)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Teebag EnclaveRegistry (r:4 w:3)
	/// Proof Skipped: Teebag EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag EnclaveIdentifier (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveIdentifier (max_values: None, max_size: None, mode: Measured)
	fn force_remove_enclave_by_worker_type() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `720`
		//  Estimated: `11610`
		// Minimum execution time: 67_810_000 picoseconds.
		Weight::from_parts(68_451_000, 11610)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Teebag AuthorizedEnclave (r:1 w:1)
	/// Proof Skipped: Teebag AuthorizedEnclave (max_values: None, max_size: None, mode: Measured)
	fn force_add_authorized_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `383`
		//  Estimated: `3848`
		// Minimum execution time: 18_646_000 picoseconds.
		Weight::from_parts(18_967_000, 3848)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Teebag AuthorizedEnclave (r:1 w:1)
	/// Proof Skipped: Teebag AuthorizedEnclave (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag EnclaveRegistry (r:1 w:0)
	/// Proof Skipped: Teebag EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	fn force_remove_authorized_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `415`
		//  Estimated: `3880`
		// Minimum execution time: 25_924_000 picoseconds.
		Weight::from_parts(26_267_000, 3880)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Teebag Mode (r:1 w:0)
	/// Proof Skipped: Teebag Mode (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Teebag AuthorizedEnclave (r:1 w:1)
	/// Proof Skipped: Teebag AuthorizedEnclave (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag EnclaveRegistry (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag EnclaveIdentifier (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveIdentifier (max_values: None, max_size: None, mode: Measured)
	fn register_enclave_with_ias_attestation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `390`
		//  Estimated: `3855`
		// Minimum execution time: 1_623_502_000 picoseconds.
		Weight::from_parts(1_640_016_000, 3855)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Teebag QuotingEnclaveRegistry (r:1 w:0)
	/// Proof Skipped: Teebag QuotingEnclaveRegistry (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Teebag TcbInfo (r:1 w:0)
	/// Proof Skipped: Teebag TcbInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag Mode (r:1 w:0)
	/// Proof Skipped: Teebag Mode (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Teebag AuthorizedEnclave (r:1 w:1)
	/// Proof Skipped: Teebag AuthorizedEnclave (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag EnclaveRegistry (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag EnclaveIdentifier (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveIdentifier (max_values: None, max_size: None, mode: Measured)
	fn register_enclave_with_dcap_attestation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `607`
		//  Estimated: `4072`
		// Minimum execution time: 4_077_847_000 picoseconds.
		Weight::from_parts(4_095_045_000, 4072)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Teebag EnclaveRegistry (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag EnclaveIdentifier (r:1 w:1)
	/// Proof Skipped: Teebag EnclaveIdentifier (max_values: None, max_size: None, mode: Measured)
	fn unregister_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `3923`
		// Minimum execution time: 26_280_000 picoseconds.
		Weight::from_parts(27_393_000, 3923)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Teebag QuotingEnclaveRegistry (r:0 w:1)
	/// Proof Skipped: Teebag QuotingEnclaveRegistry (max_values: Some(1), max_size: None, mode: Measured)
	fn register_quoting_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `94`
		//  Estimated: `1493`
		// Minimum execution time: 2_017_593_000 picoseconds.
		Weight::from_parts(2_041_732_000, 1493)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Teebag TcbInfo (r:0 w:1)
	/// Proof Skipped: Teebag TcbInfo (max_values: None, max_size: None, mode: Measured)
	fn register_tcb_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `94`
		//  Estimated: `1493`
		// Minimum execution time: 2_187_133_000 picoseconds.
		Weight::from_parts(2_218_689_000, 1493)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn post_opaque_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_125_000 picoseconds.
		Weight::from_parts(11_323_000, 0)
	}
	/// Storage: Teebag EnclaveRegistry (r:1 w:0)
	/// Proof Skipped: Teebag EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn parentchain_block_processed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `407`
		//  Estimated: `3872`
		// Minimum execution time: 21_534_000 picoseconds.
		Weight::from_parts(22_117_000, 3872)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Teebag EnclaveRegistry (r:1 w:0)
	/// Proof Skipped: Teebag EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Teebag EnclaveIdentifier (r:1 w:0)
	/// Proof Skipped: Teebag EnclaveIdentifier (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag SidechainBlockFinalizationCandidate (r:1 w:1)
	/// Proof Skipped: Teebag SidechainBlockFinalizationCandidate (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teebag LatestSidechainBlockConfirmation (r:0 w:1)
	/// Proof Skipped: Teebag LatestSidechainBlockConfirmation (max_values: None, max_size: None, mode: Measured)
	fn sidechain_block_imported() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `3993`
		// Minimum execution time: 34_318_000 picoseconds.
		Weight::from_parts(34_812_000, 3993)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}
