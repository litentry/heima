
//! Autogenerated weights for `pallet_identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-10-27, STEPS: `20`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("./source/local.json"), DB CACHE: 20

// Executed Command:
// ./target/release/litentry-collator
// benchmark
// --chain=./source/local.json
// --execution=wasm
// --db-cache=20
// --wasm-execution=compiled
// --pallet=pallet-identity
// --extrinsic=*
// --heap-pages=4096
// --steps=20
// --repeat=50
// --output=./runtime/src/weights/pallet-identity.rs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
	// Storage: Identity Registrars (r:1 w:1)
	fn add_registrar(r: u32, ) -> Weight {
		Weight::from_parts(30_842_000 as u64, 0)
			// Standard Error: 6_000
			.saturating_add(Weight::from_parts(463_000 as u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	fn set_identity(r: u32, x: u32, ) -> Weight {
		Weight::from_parts(69_189_000 as u64, 0)
			// Standard Error: 37_000
			.saturating_add(Weight::from_parts(550_000 as u64, 0).saturating_mul(r as u64))
			// Standard Error: 6_000
			.saturating_add(Weight::from_parts(1_467_000 as u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity SuperOf (r:1 w:1)
	fn set_subs_new(s: u32, ) -> Weight {
		Weight::from_parts(60_117_000 as u64, 0)
			// Standard Error: 5_000
			.saturating_add(Weight::from_parts(9_215_000 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:1)
	fn set_subs_old(p: u32, ) -> Weight {
		Weight::from_parts(59_651_000 as u64, 0)
			// Standard Error: 4_000
			.saturating_add(Weight::from_parts(3_043_000 as u64, 0).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Storage: Identity SuperOf (r:0 w:100)
	fn clear_identity(r: u32, s: u32, x: u32, ) -> Weight {
		Weight::from_parts(64_330_000 as u64, 0)
			// Standard Error: 18_000
			.saturating_add(Weight::from_parts(659_000 as u64, 0).saturating_mul(r as u64))
			// Standard Error: 3_000
			.saturating_add(Weight::from_parts(3_089_000 as u64, 0).saturating_mul(s as u64))
			// Standard Error: 3_000
			.saturating_add(Weight::from_parts(812_000 as u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Storage: Identity IdentityOf (r:1 w:1)
	fn request_judgement(r: u32, x: u32, ) -> Weight {
		Weight::from_parts(79_592_000 as u64, 0)
			// Standard Error: 6_000
			.saturating_add(Weight::from_parts(435_000 as u64, 0).saturating_mul(r as u64))
			// Standard Error: 1_000
			.saturating_add(Weight::from_parts(1_483_000 as u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:1)
	fn cancel_request(r: u32, x: u32, ) -> Weight {
		Weight::from_parts(74_756_000 as u64, 0)
			// Standard Error: 26_000
			.saturating_add(Weight::from_parts(291_000 as u64, 0).saturating_mul(r as u64))
			// Standard Error: 4_000
			.saturating_add(Weight::from_parts(1_461_000 as u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	fn set_fee(r: u32, ) -> Weight {
		Weight::from_parts(12_562_000 as u64, 0)
			// Standard Error: 3_000
			.saturating_add(Weight::from_parts(407_000 as u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	fn set_account_id(r: u32, ) -> Weight {
		Weight::from_parts(12_588_000 as u64, 0)
			// Standard Error: 3_000
			.saturating_add(Weight::from_parts(406_000 as u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:1)
	fn set_fields(r: u32, ) -> Weight {
		Weight::from_parts(12_601_000 as u64, 0)
			// Standard Error: 3_000
			.saturating_add(Weight::from_parts(404_000 as u64, 0).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity Registrars (r:1 w:0)
	// Storage: Identity IdentityOf (r:1 w:1)
	fn provide_judgement(r: u32, x: u32, ) -> Weight {
		Weight::from_parts(55_809_000 as u64, 0)
			// Standard Error: 22_000
			.saturating_add(Weight::from_parts(142_000 as u64, 0).saturating_mul(r as u64))
			// Standard Error: 3_000
			.saturating_add(Weight::from_parts(1_483_000 as u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity SubsOf (r:1 w:1)
	// Storage: Identity IdentityOf (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Identity SuperOf (r:0 w:100)
	fn kill_identity(r: u32, s: u32, x: u32, ) -> Weight {
		Weight::from_parts(82_981_000 as u64, 0)
			// Standard Error: 16_000
			.saturating_add(Weight::from_parts(586_000 as u64, 0).saturating_mul(r as u64))
			// Standard Error: 3_000
			.saturating_add(Weight::from_parts(3_095_000 as u64, 0).saturating_mul(s as u64))
			// Standard Error: 3_000
			.saturating_add(Weight::from_parts(2_000 as u64, 0).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(s as u64)))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	fn add_sub(s: u32, ) -> Weight {
		Weight::from_parts(82_321_000 as u64, 0)
			// Standard Error: 3_000
			.saturating_add(Weight::from_parts(268_000 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	fn rename_sub(s: u32, ) -> Weight {
		Weight::from_parts(23_968_000 as u64, 0)
			// Standard Error: 0
			.saturating_add(Weight::from_parts(85_000 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Identity IdentityOf (r:1 w:0)
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	fn remove_sub(s: u32, ) -> Weight {
		Weight::from_parts(82_550_000 as u64, 0)
			// Standard Error: 2_000
			.saturating_add(Weight::from_parts(264_000 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Identity SuperOf (r:1 w:1)
	// Storage: Identity SubsOf (r:1 w:1)
	fn quit_sub(s: u32, ) -> Weight {
		Weight::from_parts(50_979_000 as u64, 0)
			// Standard Error: 2_000
			.saturating_add(Weight::from_parts(251_000 as u64, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
