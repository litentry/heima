[package]
authors = ["Trust Computing GmbH <info@litentry.com>"]
edition = "2021"
name = "lc-direct-call"
version = "0.1.0"

[dependencies]
log = { workspace = true }
codec = { package = "parity-scale-codec", workspace = true }
sp-core = { workspace = true }
sp-io = { workspace = true }

# internal dependencies
bc-enclave-registry = { path = "../../../bitacross/core/bc-enclave-registry", default-features = false }
bc-musig2-ceremony = { path = "../../../bitacross/core/bc-musig2-ceremony", default-features = false }
bc-relayer-registry = { path = "../../../bitacross/core/bc-relayer-registry", default-features = false }
bc-signer-registry = { path = "../../../bitacross/core/bc-signer-registry", default-features = false }

itp-sgx-crypto = { workspace = true }
itp-stf-primitives = { workspace = true }
litentry-primitives = { workspace = true }

sgx_tstd = { workspace = true, optional = true }

[dev-dependencies]
k256 = { workspace = true, features = ["ecdsa-core", "schnorr"] }
rand = { workspace = true }
hex = { workspace = true }
itp-sgx-crypto = { workspace = true, features = ["std", "mocks"] }

[features]
default = ["std"]
development = [
    "litentry-primitives/development",
]
sgx = [
    "sgx_tstd",
    "bc-musig2-ceremony/sgx",
    "bc-enclave-registry/sgx",
    "bc-relayer-registry/sgx",
    "bc-signer-registry/sgx",
    "litentry-primitives/sgx",
    "itp-sgx-crypto/sgx",
]
std = [
    "bc-musig2-ceremony/std",
    "bc-enclave-registry/std",
    "bc-relayer-registry/std",
    "bc-signer-registry/std",
    "itp-stf-primitives/std",
    "itp-sgx-crypto/std",
    "litentry-primitives/std",
    "sp-core/std",
    "sp-io/std",
    "codec/std",
]
test = [
    "itp-sgx-crypto/mocks",
]
