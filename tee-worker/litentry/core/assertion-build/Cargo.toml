[package]
authors = ["Trust Computing GmbH <info@litentry.com>"]
edition = "2021"
name = "lc-assertion-build"
version = "0.1.0"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# std dependencies
blake2-rfc = { version = "0.2.18", default-features = false }
http = { version = "0.2", optional = true }
http_req = { optional = true, features = ["rust-tls"], branch = "master", git = "https://github.com/integritee-network/http_req" }
rust-base58 = { package = "rust-base58", version = "0.0.4", optional = true }
ss58-registry = { version = "1.40", default-features = false }

# sgx dependencies
http-sgx = { package = "http", git = "https://github.com/integritee-network/http-sgx.git", branch = "sgx-experimental", optional = true }
http_req-sgx = { optional = true, default-features = false, features = ["rust-tls", "sgx"], package = "http_req", git = "https://github.com/integritee-network/http_req" }
rust-base58-sgx = { git = "https://github.com/mesalock-linux/rust-base58-sgx", optional = true, package = "rust-base58", features = ["mesalock_sgx"] }
sgx_tstd = { branch = "master", git = "https://github.com/apache/teaclave-sgx-sdk.git", optional = true, features = ["net", "thread"] }
thiserror_sgx = { package = "thiserror", git = "https://github.com/mesalock-linux/thiserror-sgx", tag = "sgx_1.1.3", optional = true }

# no_std dependencies
codec = { package = "parity-scale-codec", version = "3.0.0", default-features = false, features = ["derive"] }
hex = { version = "0.4.3", default-features = false }
log = { version = "0.4", default-features = false }
serde = { version = "1.0", default-features = false, features = ["derive", "alloc"] }
serde_json = { version = "1.0", default-features = false, features = ["alloc"] }

primitive-types = { version = "0.12.1", default-features = false }

# internal dependencies
itc-rest-client = { path = "../../../core/rest-client", default-features = false }
itp-ocall-api = { path = "../../../core-primitives/ocall-api", default-features = false }
itp-stf-primitives = { default-features = false, path = "../../../core-primitives/stf-primitives" }
itp-types = { path = "../../../core-primitives/types", default-features = false }
itp-utils = { path = "../../../core-primitives/utils", default-features = false }


frame-support = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v0.9.42", default-features = false }

sp-core = { default-features = false, features = ["full_crypto"], git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v0.9.42" }

# litentry
lc-common = { path = "../common", default-features = false }
lc-credentials = { path = "../credentials", default-features = false }
lc-data-providers = { path = "../data-providers", default-features = false }
lc-dynamic-assertion = { path = "../dynamic-assertion", default-features = false }
lc-evm-dynamic-assertions = { path = "../evm-dynamic-assertions", default-features = false }
lc-stf-task-sender = { path = "../stf-task/sender", default-features = false }
litentry-primitives = { path = "../../primitives", default-features = false }
pallet-parachain-staking = { path = "../../../../pallets/parachain-staking", default-features = false }

[dev-dependencies]
env_logger = "0.10.0"
lc-mock-server = { path = "../mock-server" }
litentry-hex-utils = { path = "../../../../primitives/hex" }
ethabi = { version = "18.0.0", default-features = false }

[features]
default = ["std"]
sgx = [
    "http-sgx",
    "http_req-sgx",
    "rust-base58-sgx",
    "itc-rest-client/sgx",
    "sgx_tstd",
    "thiserror_sgx",
    "litentry-primitives/sgx",
    "lc-stf-task-sender/sgx",
    "lc-common/sgx",
    "lc-credentials/sgx",
    "lc-data-providers/sgx",
    "lc-dynamic-assertion/sgx",
    "lc-evm-dynamic-assertions/sgx",
    "primitive-types/codec",
    "primitive-types/serde_no_std",
]
std = [
    "http",
    "http_req",
    "itc-rest-client/std",
    "log/std",
    "serde/std",
    "serde_json/std",
    "rust-base58",
    "itp-types/std",
    "itp-utils/std",
    "frame-support/std",
    "litentry-primitives/std",
    "lc-stf-task-sender/std",
    "lc-common/std",
    "lc-credentials/std",
    "lc-data-providers/std",
    "lc-dynamic-assertion/std",
    "lc-evm-dynamic-assertions/std",
]
development = []
