[package]
name = "lc-evm-dynamic-assertions"
version = "0.1.0"
authors = ['Trust Computing GmbH <info@litentry.com>']
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
base58 = { workspace = true }
blake2-rfc = { workspace = true }
chrono = { workspace = true, optional = true }
codec = { package = "parity-scale-codec", workspace = true }
http = { workspace = true, optional = true }
rust_decimal = { workspace = true }
ss58-registry = { workspace = true }
thiserror = { workspace = true, optional = true }

chrono_sgx = { workspace = true, optional = true }
http-sgx = { workspace = true, optional = true }
itp-sgx-temp-dir = { workspace = true, optional = true }
sgx_tstd = { workspace = true, optional = true }
thiserror_sgx = { workspace = true, optional = true }

ethabi = { workspace = true }
evm = { workspace = true }
hex = { workspace = true }
log = { workspace = true }
serde_json = { workspace = true }

# local
itc-rest-client = { workspace = true }
itp-enclave-metrics = { workspace = true }
itp-ocall-api = { workspace = true }
itp-settings = { workspace = true }
itp-sgx-io = { workspace = true }
lc-dynamic-assertion = { workspace = true }
litentry-primitives = { workspace = true }

[dev-dependencies]
http_req = { workspace = true }
lc-mock-server = { workspace = true }
litentry-primitives = { workspace = true, features = ["std"] }
litentry-hex-utils = { workspace = true }

[features]
default = ["std"]
std = [
    "lc-dynamic-assertion/std",
    "itc-rest-client/std",
    "itp-sgx-io/std",
    "serde_json/std",
    "http",
    "thiserror",
    "chrono",
]
sgx = [
    "sgx_tstd",
    "http-sgx",
    "lc-dynamic-assertion/sgx",
    "itc-rest-client/sgx",
    "itp-sgx-io/sgx",
    "thiserror_sgx",
    "chrono_sgx",
]
sgx-test = ["itp-sgx-temp-dir/sgx"]
