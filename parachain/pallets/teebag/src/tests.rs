// Copyright 2020-2024 Trust Computing GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

// TODO: add `sidechain_block_imported` tests

#![allow(dead_code, unused_imports)]
use crate::{
	mock::*, test_util::*, AttestationType, AuthorizedEnclave, DcapProvider, Enclave,
	EnclaveRegistry, Error, Event as TeebagEvent, SgxBuildMode, WorkerType, H256,
};
use frame_support::{assert_noop, assert_ok};
use hex_literal::hex;
use sp_keyring::AccountKeyring;
use sp_runtime::AccountId32;

const VALID_TIMESTAMP: Moment = 1671606747000;

fn alice() -> AccountId32 {
	AccountKeyring::Alice.to_account_id()
}

fn default_enclave() -> Enclave {
	Enclave::new(WorkerType::Identity)
		.with_attestation_type(AttestationType::Ignore)
		.with_url(URL.to_vec())
		.with_last_seen_timestamp(pallet_timestamp::Pallet::<Test>::now())
}

fn register_quoting_enclave() {
	let quoting_enclave = br#"{"id":"QE","version":2,"issueDate":"2022-12-04T22:45:33Z","nextUpdate":"2023-01-03T22:45:33Z","tcbEvaluationDataNumber":13,"miscselect":"00000000","miscselectMask":"FFFFFFFF","attributes":"11000000000000000000000000000000","attributesMask":"FBFFFFFFFFFFFFFF0000000000000000","mrsigner":"8C4F5775D796503E96137F77C68A829A0056AC8DED70140B081B094490C57BFF","isvprodid":1,"tcbLevels":[{"tcb":{"isvsvn":6},"tcbDate":"2022-11-09T00:00:00Z","tcbStatus":"UpToDate"},{"tcb":{"isvsvn":5},"tcbDate":"2020-11-11T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00477"]},{"tcb":{"isvsvn":4},"tcbDate":"2019-11-13T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00334","INTEL-SA-00477"]},{"tcb":{"isvsvn":2},"tcbDate":"2019-05-15T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00219","INTEL-SA-00293","INTEL-SA-00334","INTEL-SA-00477"]},{"tcb":{"isvsvn":1},"tcbDate":"2018-08-15T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00202","INTEL-SA-00219","INTEL-SA-00293","INTEL-SA-00334","INTEL-SA-00477"]}]}"#;
	let signature = hex!("47accba321e57c20722a0d3d1db11c9b52661239857dc578ca1bde13976ee288cf39f72111ffe445c7389ef56447c79e30e6b83a8863ed9880de5bde4a8d5c91");
	let certificate_chain = include_bytes!("./sgx_verify/test/dcap/qe_identity_issuer_chain.pem");

	let pubkey: [u8; 32] = [
		65, 89, 193, 118, 86, 172, 17, 149, 206, 160, 174, 75, 219, 151, 51, 235, 110, 135, 20, 55,
		147, 162, 106, 110, 143, 207, 57, 64, 67, 63, 203, 95,
	];
	let signer: AccountId32 = get_signer(&pubkey);
	assert_ok!(Teebag::register_quoting_enclave(
		RuntimeOrigin::signed(signer),
		quoting_enclave.to_vec(),
		signature.to_vec(),
		certificate_chain.to_vec(),
	));
}

fn register_tcb_info() {
	let tcb_info = br#"{"id":"SGX","version":3,"issueDate":"2022-11-17T12:45:32Z","nextUpdate":"2023-04-16T12:45:32Z","fmspc":"00906EA10000","pceId":"0000","tcbType":0,"tcbEvaluationDataNumber":12,"tcbLevels":[{"tcb":{"sgxtcbcomponents":[{"svn":17},{"svn":17},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":7},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":11},"tcbDate":"2021-11-10T00:00:00Z","tcbStatus":"SWHardeningNeeded","advisoryIDs":["INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":17},{"svn":17},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":7},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":10},"tcbDate":"2020-11-11T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00161","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":17},{"svn":17},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":11},"tcbDate":"2021-11-10T00:00:00Z","tcbStatus":"ConfigurationAndSWHardeningNeeded","advisoryIDs":["INTEL-SA-00161","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":17},{"svn":17},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":10},"tcbDate":"2020-11-11T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00477","INTEL-SA-00161","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":15},{"svn":15},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":7},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":10},"tcbDate":"2020-06-10T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00161","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":15},{"svn":15},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":10},"tcbDate":"2020-06-10T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00161","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":14},{"svn":14},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":7},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":10},"tcbDate":"2019-12-11T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00161","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":14},{"svn":14},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":10},"tcbDate":"2019-12-11T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00161","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":13},{"svn":13},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":3},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":9},"tcbDate":"2019-11-13T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00161","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":13},{"svn":13},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":9},"tcbDate":"2019-11-13T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00161","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":6},{"svn":6},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":1},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":7},"tcbDate":"2019-05-15T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00220","INTEL-SA-00270","INTEL-SA-00293","INTEL-SA-00161","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":6},{"svn":6},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":7},"tcbDate":"2019-05-15T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00161","INTEL-SA-00220","INTEL-SA-00270","INTEL-SA-00293","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":5},{"svn":5},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":1},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":7},"tcbDate":"2019-01-09T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00233","INTEL-SA-00161","INTEL-SA-00220","INTEL-SA-00270","INTEL-SA-00293","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":5},{"svn":5},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":1},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":6},"tcbDate":"2018-08-15T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00161","INTEL-SA-00233","INTEL-SA-00220","INTEL-SA-00270","INTEL-SA-00293","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":5},{"svn":5},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":7},"tcbDate":"2019-01-09T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00161","INTEL-SA-00233","INTEL-SA-00220","INTEL-SA-00270","INTEL-SA-00293","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":5},{"svn":5},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":6},"tcbDate":"2018-08-15T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00203","INTEL-SA-00161","INTEL-SA-00233","INTEL-SA-00220","INTEL-SA-00270","INTEL-SA-00293","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":4},{"svn":4},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":5},"tcbDate":"2018-01-04T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00106","INTEL-SA-00115","INTEL-SA-00135","INTEL-SA-00203","INTEL-SA-00161","INTEL-SA-00233","INTEL-SA-00220","INTEL-SA-00270","INTEL-SA-00293","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]},{"tcb":{"sgxtcbcomponents":[{"svn":2},{"svn":2},{"svn":2},{"svn":4},{"svn":1},{"svn":128},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":4},"tcbDate":"2017-07-26T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00088","INTEL-SA-00106","INTEL-SA-00115","INTEL-SA-00135","INTEL-SA-00203","INTEL-SA-00161","INTEL-SA-00233","INTEL-SA-00220","INTEL-SA-00270","INTEL-SA-00293","INTEL-SA-00219","INTEL-SA-00289","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00334"]}]}"#;
	let signature = hex!("71746f2148ecba04e35cf1ac77a7e6267ce99f6781c1031f724bb5bd94b8c1b6e4c07c01dc151692aa75be80dfba7350bb80c58314a6975189597e28e9bbc75c");
	let certificate_chain = include_bytes!("./sgx_verify/test/dcap/tcb_info_issuer_chain.pem");

	let pubkey: [u8; 32] = [
		65, 89, 193, 118, 86, 172, 17, 149, 206, 160, 174, 75, 219, 151, 51, 235, 110, 135, 20, 55,
		147, 162, 106, 110, 143, 207, 57, 64, 67, 63, 203, 95,
	];
	let signer: AccountId32 = get_signer(&pubkey);
	assert_ok!(Teebag::register_tcb_info(
		RuntimeOrigin::signed(signer),
		tcb_info.to_vec(),
		signature.to_vec(),
		certificate_chain.to_vec(),
	));
}

// =====================================================
// Unittest in `Development` mode, where:
// - AttestationType::Ignore is possible
// - No authorized enclave check
// - No sgx_build_mode check
// =====================================================

#[test]
fn register_enclave_dev_works_with_no_authorized_enclave() {
	new_test_ext(true).execute_with(|| {
		// it works with no entry in authorized_enclave
		assert_ok!(Teebag::register_enclave(
			RuntimeOrigin::signed(alice()),
			Default::default(),
			Default::default(),
			TEST4_MRENCLAVE.to_vec(),
			URL.to_vec(),
			None,
			None,
			AttestationType::Ignore,
		));

		let enclave = default_enclave().with_mrenclave(TEST4_MRENCLAVE);

		assert_eq!(Teebag::enclave_count(WorkerType::Identity), 1);
		assert_eq!(Teebag::enclave_count(WorkerType::BitAcross), 0);
		assert_eq!(EnclaveRegistry::<Test>::get(alice()).unwrap(), enclave);
		let authorized_enclave = AuthorizedEnclave::<Test>::get(WorkerType::default());
		assert_eq!(authorized_enclave.len(), 1);
		assert_eq!(authorized_enclave.first().unwrap(), TEST4_MRENCLAVE.as_ref());
	})
}

#[test]
fn register_enclave_dev_works_with_sgx_build_mode_debug() {
	new_test_ext(true).execute_with(|| {
		// we'll need to use real attestation data
		set_timestamp(TEST4_TIMESTAMP);
		let signer4: AccountId32 = get_signer(TEST4_SIGNER_PUB);
		assert_ok!(Teebag::register_enclave(
			RuntimeOrigin::signed(signer4.clone()),
			Default::default(),
			Default::default(),
			TEST4_CERT.to_vec(),
			URL.to_vec(),
			None,
			None,
			AttestationType::Ias,
		));

		let enclave = default_enclave()
			.with_mrenclave(TEST4_MRENCLAVE)
			.with_last_seen_timestamp(TEST4_TIMESTAMP)
			.with_sgx_build_mode(SgxBuildMode::Debug)
			.with_attestation_type(AttestationType::Ias);

		assert_eq!(Teebag::enclave_count(WorkerType::Identity), 1);
		assert_eq!(Teebag::enclave_count(WorkerType::BitAcross), 0);
		assert_eq!(EnclaveRegistry::<Test>::get(signer4).unwrap(), enclave);
	})
}

#[test]
fn parentchain_block_processed_works() {
	new_test_ext(true).execute_with(|| {
		Timestamp::set_timestamp(TEST7_TIMESTAMP);

		// start from block 2, otherwise we get `TimeStamp not set` error,
		// because `run_to_block` calls `Timestamp::on_finalize`
		run_to_block(2);
		Timestamp::set_timestamp(TEST7_TIMESTAMP + 12 * 1000);

		let block_hash = H256::default();
		let merkle_root = H256::default();
		let block_number = 2;
		let signer7: AccountId32 = get_signer(TEST7_SIGNER_PUB);

		// Ensure that enclave is registered
		assert_ok!(Teebag::register_enclave(
			RuntimeOrigin::signed(signer7.clone()),
			WorkerType::BitAcross,
			Default::default(),
			TEST7_CERT.to_vec(),
			URL.to_vec(),
			None,
			None,
			AttestationType::Ias,
		));
		assert_eq!(Teebag::enclave_count(WorkerType::BitAcross), 1);

		run_to_block(3);
		Timestamp::set_timestamp(TEST7_TIMESTAMP + 24 * 1000);

		assert_ok!(Teebag::parentchain_block_processed(
			RuntimeOrigin::signed(signer7.clone()),
			block_hash,
			block_number,
			merkle_root,
		));

		let expected_event = RuntimeEvent::Teebag(TeebagEvent::ParentchainBlockProcessed {
			who: signer7,
			block_number,
			block_hash,
			task_merkle_root: merkle_root,
		});
		assert!(System::events().iter().any(|a| a.event == expected_event));
	})
}

#[test]
fn register_dcap_enclave_works() {
	new_test_ext(true).execute_with(|| {
		Timestamp::set_timestamp(VALID_TIMESTAMP);
		register_quoting_enclave();
		register_tcb_info();

		let pubkey: [u8; 32] = [
			65, 89, 193, 118, 86, 172, 17, 149, 206, 160, 174, 75, 219, 151, 51, 235, 110, 135, 20,
			55, 147, 162, 106, 110, 143, 207, 57, 64, 67, 63, 203, 95,
		];
		let signer: AccountId = get_signer(&pubkey);
		assert_ok!(Teebag::register_enclave(
			RuntimeOrigin::signed(signer.clone()),
			WorkerType::Identity,
			Default::default(),
			TEST1_DCAP_QUOTE.to_vec(),
			URL.to_vec(),
			None,
			None,
			AttestationType::Dcap(DcapProvider::Intel)
		));
		assert_eq!(Teebag::enclave_count(WorkerType::Identity), 1);
		assert_eq!(Teebag::enclave_registry(&signer).unwrap().last_seen_timestamp, VALID_TIMESTAMP);
		assert_ok!(Teebag::unregister_enclave(RuntimeOrigin::signed(signer)));
		assert_eq!(Teebag::enclave_count(WorkerType::Identity), 0);
	})
}

const DCAP_QUOTE: &str = "030002000000000009000e00939a7233f79c4ca9940a0db3957f0607843bf40b9a0f12a878f1142ded7b9c29000000000b0c0218ffff0400000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000e700000000000000e31ec6238a622fa6db93cfc7502c78b62aa23f74f2b7d0cb7a105a11f6b5e931000000000000000000000000000000000000000000000000000000000000000013d77a368135bbb449b56576f5fa46f96774afa540a59147fa5eb4fd9a1c6cd2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f93d0e68224f71745321b00d4c02119fdcc6d7a5caad051f664a0484cc9f56d0000000000000000000000000000000000000000000000000000000000000000441000007f65a0a8dcfac917056c6fffd0d4c48f25707f0591efab17f73fbd7121db48a4c006643aaaa997093a89b6d010a372cfda9a2849462c8c3649848b4ff0f989def0c4025ecf251d0de3745f9e7743e45d3a13afa5f3d03c70ebbb547109ee4f6c21c97d85eacf1eab4798e92a30f3955773bc010dfc99c534380853707cdcf4f50b0c0218ffff0400000000000000000000000000000000000000000000000000000000000000000000000000000000001500000000000000e700000000000000192aa50ce1c0cef03ccf89e7b5b16b0d7978f5c2b1edcf774d87702e8154d8bf00000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b3aa0f75e102c73b080a746df8573700dc799dcd1e698235e6afa52a4907bad90000000000000000000000000000000000000000000000000000000000000000309fff9db713fdc6529a2182e025731ff65a6f013eb166a2a79ef19c18d28f61f6f24ffef9d528bf6b9b84577e17916eb219a347d90200b74bca9c046772e9702000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500dc0d00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949456a6a4343424453674177494241674956414c6b4359352f4166756e41584a7566334432304c57444c4c4a61464d416f4743437147534d343942414d430a4d484578497a416842674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b0a4442464a626e526c6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e560a4241674d416b4e424d517377435159445651514745774a56557a4165467730794e4441334d4459794d6a4d324d4464614677307a4d5441334d4459794d6a4d320a4d4464614d484178496a416742674e5642414d4d47556c756447567349464e4857434251513073675132567964476c6d61574e6864475578476a415942674e560a42416f4d45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b470a413155454341774351304578437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741450a613776706e38486d32654668386b3979795a73516270614a6b4f71764f4c732b472f63764779344e34567143536e4d6c4130367051506d3376787559587a4f6b0a613247382b69787663415979556a745037354a557a364f434171677767674b6b4d42384741315564497751594d426141464e446f71747031312f6b75535265590a504873555a644456386c6c4e4d477747413155644877526c4d474d77596142666f463247573268306448427a4f693876595842704c6e527964584e305a57527a0a5a584a3261574e6c63793570626e526c6243356a62323076633264344c324e6c636e52705a6d6c6a5958527062323476646a517663474e7259334a7350324e680a5058427962324e6c63334e7663695a6c626d4e765a476c755a7a316b5a584977485159445652304f424259454642616e30456848464431556573414b4c58572f0a70382b54685a627a4d41344741315564447745422f775145417749477744414d42674e5648524d4241663845416a41414d4949423141594a4b6f5a496876684e0a415130424249494278544343416345774867594b4b6f5a496876684e415130424151515164474b4f704e37624b782b31306872386d6b786855544343415751470a43697147534962345451454e41514977676746554d42414743797147534962345451454e415149424167454c4d42414743797147534962345451454e415149430a4167454c4d42414743797147534962345451454e41514944416745434d42414743797147534962345451454e41514945416745434d42454743797147534962340a5451454e41514946416749412f7a415142677371686b69472b45304244514543426749424154415142677371686b69472b4530424451454342774942414441510a42677371686b69472b45304244514543434149424144415142677371686b69472b45304244514543435149424144415142677371686b69472b453042445145430a436749424144415142677371686b69472b45304244514543437749424144415142677371686b69472b45304244514543444149424144415142677371686b69470a2b45304244514543445149424144415142677371686b69472b45304244514543446749424144415142677371686b69472b4530424451454344774942414441510a42677371686b69472b45304244514543454149424144415142677371686b69472b45304244514543455149424454416642677371686b69472b453042445145430a4567515143777343417638424141414141414141414141414144415142676f71686b69472b45304244514544424149414144415542676f71686b69472b4530420a44514545424159416f476352414141774477594b4b6f5a496876684e4151304242516f424144414b42676771686b6a4f5051514441674e4941444246416945410a69467264455347686a74756a4745636f483766542f7976735a4862644d38492b5550746e413342674536454349416e6d597a6f4b596b5839412b4731424843770a75456d34517447776b65715a2f44766e6355456d51326b580a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436d444343416a36674177494241674956414e446f71747031312f6b7553526559504873555a644456386c6c4e4d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484578497a41680a42674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b4442464a626e526c0a6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e420a4d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424c39712b4e4d7032494f670a74646c31626b2f75575a352b5447516d38614369387a373866732b664b435133642b75447a586e56544154325a68444369667949754a77764e33774e427039690a484253534d4a4d4a72424f6a6762737767626777487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e427177770a556759445652306642457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356b5a584977485159445652304f42425945464e446f0a71747031312f6b7553526559504873555a644456386c6c4e4d41344741315564447745422f77514541774942426a415342674e5648524d4241663845434441470a4151482f416745414d416f4743437147534d343942414d43413067414d4555434951434a6754627456714f795a316d336a716941584d365159613672357357530a34792f4737793875494a4778647749675271507642534b7a7a516167424c517135733541373070646f6961524a387a2f3075447a344e675639316b3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a00";

#[test]
fn register_dcap_enclave2_works() {
	// the data comes from real quote generated on our host
	new_test_ext(true).execute_with(|| {
		Timestamp::set_timestamp(1720308602000);

		let quoting_enclave = br#"{"id":"QE","version":2,"issueDate":"2024-07-06T21:44:35Z","nextUpdate":"2024-08-05T21:44:35Z","tcbEvaluationDataNumber":16,"miscselect":"00000000","miscselectMask":"FFFFFFFF","attributes":"11000000000000000000000000000000","attributesMask":"FBFFFFFFFFFFFFFF0000000000000000","mrsigner":"8C4F5775D796503E96137F77C68A829A0056AC8DED70140B081B094490C57BFF","isvprodid":1,"tcbLevels":[{"tcb":{"isvsvn":8},"tcbDate":"2023-08-09T00:00:00Z","tcbStatus":"UpToDate"},{"tcb":{"isvsvn":6},"tcbDate":"2021-11-10T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00615"]},{"tcb":{"isvsvn":5},"tcbDate":"2020-11-11T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00477","INTEL-SA-00615"]},{"tcb":{"isvsvn":4},"tcbDate":"2019-11-13T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00334","INTEL-SA-00477","INTEL-SA-00615"]},{"tcb":{"isvsvn":2},"tcbDate":"2019-05-15T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00219","INTEL-SA-00293","INTEL-SA-00334","INTEL-SA-00477","INTEL-SA-00615"]},{"tcb":{"isvsvn":1},"tcbDate":"2018-08-15T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00202","INTEL-SA-00219","INTEL-SA-00293","INTEL-SA-00334","INTEL-SA-00477","INTEL-SA-00615"]}]}"#;
		let signature = hex!("86ff60fd0d914f08a88ff2b04284060f72eaa62d612cbfb9397e59b97aba74a05e429de8eaedd44db82fc5ee91113dbdd57e63e76d8ebcce83b1b9c557a9e0d9");
		let certificate_chain = hex!("2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d494943697a4343416a4b674177494241674955666a6943316674564b5570415359354668415070464a473939465577436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e5441784d466f58445449314d4455794d5445774e5441784d466f77624445654d4277470a4131554541777756535735305a577767553064594946524451694254615764756157356e4d526f77474159445651514b4442464a626e526c6243424462334a770a62334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d517377435159440a5651514745774a56557a425a4d424d4742797147534d34394167454743437147534d3439417745484130494142454e464738787a79645752664b3932626d47760a502b6d4168393150457956374a683646474a64356e644539614248375233453441377562726c682f7a4e3343347876706f6f75476c69724d62612b57326c6a750a7970616a6762557767624977487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e4271777755675944565230660a42457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c636e5a705932567a0a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356b5a584977485159445652304f42425945464834346774583756536c4b0a51456d4f5259514436525352766652564d41344741315564447745422f775145417749477744414d42674e5648524d4241663845416a41414d416f47434371470a534d343942414d43413063414d4551434942394338774f414e2f496d784474474143563234364b63716a61675a4f52306b7963747942727347474a564169416a0a667462724e47734755385948323131645269594e6f50507531395a702f7a65384a6d68756a42306f42773d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a00");

		let pubkey: Vec<u8> = hex::decode("6f93d0e68224f71745321b00d4c02119fdcc6d7a5caad051f664a0484cc9f56d").unwrap();
		let dcap = hex::decode(DCAP_QUOTE).unwrap();
		let signer: AccountId = pubkey.as_slice().try_into().unwrap();

		assert_ok!(Teebag::register_quoting_enclave(
			RuntimeOrigin::signed(signer.clone()),
			quoting_enclave.to_vec(),
			signature.to_vec(),
			certificate_chain.to_vec(),
		));

		// register tcb
		let tcb_info = br#"{"id":"SGX","version":3,"issueDate":"2024-07-06T22:21:41Z","nextUpdate":"2024-08-05T22:21:41Z","fmspc":"00A067110000","pceId":"0000","tcbType":0,"tcbEvaluationDataNumber":16,"tcbLevels":[{"tcb":{"sgxtcbcomponents":[{"svn":11},{"svn":11},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":12},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":13},"tcbDate":"2023-08-09T00:00:00Z","tcbStatus":"SWHardeningNeeded","advisoryIDs":["INTEL-SA-00615"]},{"tcb":{"sgxtcbcomponents":[{"svn":11},{"svn":11},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":13},"tcbDate":"2023-08-09T00:00:00Z","tcbStatus":"ConfigurationAndSWHardeningNeeded","advisoryIDs":["INTEL-SA-00289","INTEL-SA-00615"]},{"tcb":{"sgxtcbcomponents":[{"svn":10},{"svn":10},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":12},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":13},"tcbDate":"2023-02-15T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00828","INTEL-SA-00289","INTEL-SA-00615"]},{"tcb":{"sgxtcbcomponents":[{"svn":10},{"svn":10},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":13},"tcbDate":"2023-02-15T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00289","INTEL-SA-00828","INTEL-SA-00615"]},{"tcb":{"sgxtcbcomponents":[{"svn":9},{"svn":9},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":12},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":13},"tcbDate":"2022-11-09T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00657","INTEL-SA-00767","INTEL-SA-00289","INTEL-SA-00828","INTEL-SA-00615"]},{"tcb":{"sgxtcbcomponents":[{"svn":9},{"svn":9},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":13},"tcbDate":"2022-11-09T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00289","INTEL-SA-00657","INTEL-SA-00767","INTEL-SA-00828","INTEL-SA-00615"]},{"tcb":{"sgxtcbcomponents":[{"svn":5},{"svn":5},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":4},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":11},"tcbDate":"2021-11-10T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00614","INTEL-SA-00617","INTEL-SA-00289","INTEL-SA-00657","INTEL-SA-00767","INTEL-SA-00828","INTEL-SA-00615"]},{"tcb":{"sgxtcbcomponents":[{"svn":5},{"svn":5},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":4},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":10},"tcbDate":"2020-11-11T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00289","INTEL-SA-00614","INTEL-SA-00617","INTEL-SA-00657","INTEL-SA-00767","INTEL-SA-00828","INTEL-SA-00615"]},{"tcb":{"sgxtcbcomponents":[{"svn":5},{"svn":5},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":11},"tcbDate":"2021-11-10T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00289","INTEL-SA-00614","INTEL-SA-00617","INTEL-SA-00657","INTEL-SA-00767","INTEL-SA-00828","INTEL-SA-00615"]},{"tcb":{"sgxtcbcomponents":[{"svn":5},{"svn":5},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":10},"tcbDate":"2020-11-11T00:00:00Z","tcbStatus":"OutOfDateConfigurationNeeded","advisoryIDs":["INTEL-SA-00477","INTEL-SA-00289","INTEL-SA-00614","INTEL-SA-00617","INTEL-SA-00657","INTEL-SA-00767","INTEL-SA-00828","INTEL-SA-00615"]},{"tcb":{"sgxtcbcomponents":[{"svn":5},{"svn":5},{"svn":2},{"svn":2},{"svn":255},{"svn":1},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0},{"svn":0}],"pcesvn":5},"tcbDate":"2018-01-04T00:00:00Z","tcbStatus":"OutOfDate","advisoryIDs":["INTEL-SA-00106","INTEL-SA-00115","INTEL-SA-00135","INTEL-SA-00203","INTEL-SA-00220","INTEL-SA-00233","INTEL-SA-00270","INTEL-SA-00293","INTEL-SA-00320","INTEL-SA-00329","INTEL-SA-00381","INTEL-SA-00389","INTEL-SA-00477","INTEL-SA-00289","INTEL-SA-00614","INTEL-SA-00617","INTEL-SA-00657","INTEL-SA-00767","INTEL-SA-00828","INTEL-SA-00615"]}]}"#;
		let signature = hex!("7173d497ca3dcc87c190d1f03e7c3ef04e253f81ac90563fd90131d49df50216f60d0a1369b103fda9720a91d9963afabde6aade0ded3646b52727a42dce210c");
		let certificate_chain = hex!("2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d494943697a4343416a4b674177494241674955666a6943316674564b5570415359354668415070464a473939465577436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e5441784d466f58445449314d4455794d5445774e5441784d466f77624445654d4277470a4131554541777756535735305a577767553064594946524451694254615764756157356e4d526f77474159445651514b4442464a626e526c6243424462334a770a62334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d517377435159440a5651514745774a56557a425a4d424d4742797147534d34394167454743437147534d3439417745484130494142454e464738787a79645752664b3932626d47760a502b6d4168393150457956374a683646474a64356e644539614248375233453441377562726c682f7a4e3343347876706f6f75476c69724d62612b57326c6a750a7970616a6762557767624977487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e4271777755675944565230660a42457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c636e5a705932567a0a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356b5a584977485159445652304f42425945464834346774583756536c4b0a51456d4f5259514436525352766652564d41344741315564447745422f775145417749477744414d42674e5648524d4241663845416a41414d416f47434371470a534d343942414d43413063414d4551434942394338774f414e2f496d784474474143563234364b63716a61675a4f52306b7963747942727347474a564169416a0a667462724e47734755385948323131645269594e6f50507531395a702f7a65384a6d68756a42306f42773d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a00");

		assert_ok!(Teebag::register_tcb_info(
			RuntimeOrigin::signed(signer.clone()),
			tcb_info.to_vec(),
			signature.to_vec(),
			certificate_chain.to_vec(),
		));

		assert_ok!(Teebag::register_enclave(
			RuntimeOrigin::signed(signer.clone()),
			WorkerType::Identity,
			Default::default(),
			dcap,
			URL.to_vec(),
			None,
			None,
			AttestationType::Dcap(DcapProvider::Intel)
		));
		assert_eq!(Teebag::enclave_count(WorkerType::Identity), 1);
		assert_eq!(Teebag::enclave_registry(&signer).unwrap().last_seen_timestamp, 1720308602000);
		assert_ok!(Teebag::unregister_enclave(RuntimeOrigin::signed(signer)));
		assert_eq!(Teebag::enclave_count(WorkerType::Identity), 0);
	})
}

// =====================================================
// Unittest in `Production` mode
// =====================================================

#[test]
fn register_enclave_prod_works_with_sgx_build_mode_debug() {
	new_test_ext(false).execute_with(|| {
		assert_ok!(Teebag::force_add_authorized_enclave(
			RuntimeOrigin::signed(alice()),
			WorkerType::Identity,
			TEST4_MRENCLAVE
		));

		set_timestamp(TEST4_TIMESTAMP);
		let signer4: AccountId32 = get_signer(TEST4_SIGNER_PUB);
		assert_ok!(Teebag::register_enclave(
			RuntimeOrigin::signed(signer4.clone()),
			Default::default(),
			Default::default(),
			TEST4_CERT.to_vec(),
			URL.to_vec(),
			None,
			None,
			AttestationType::Ias,
		));

		let enclave = default_enclave()
			.with_mrenclave(TEST4_MRENCLAVE)
			.with_last_seen_timestamp(TEST4_TIMESTAMP)
			.with_sgx_build_mode(SgxBuildMode::Debug)
			.with_attestation_type(AttestationType::Ias);

		assert_eq!(Teebag::enclave_count(WorkerType::Identity), 1);
		assert_eq!(Teebag::enclave_count(WorkerType::BitAcross), 0);
		assert_eq!(EnclaveRegistry::<Test>::get(signer4).unwrap(), enclave);
	})
}

#[test]
fn register_enclave_prod_works_with_sgx_build_mode_production() {
	new_test_ext(false).execute_with(|| {
		assert_ok!(Teebag::force_add_authorized_enclave(
			RuntimeOrigin::signed(alice()),
			WorkerType::Identity,
			TEST8_MRENCLAVE
		));

		set_timestamp(TEST8_TIMESTAMP);
		let signer8: AccountId32 = get_signer(TEST8_SIGNER_PUB);
		assert_ok!(Teebag::register_enclave(
			RuntimeOrigin::signed(signer8.clone()),
			Default::default(),
			Default::default(),
			TEST8_CERT.to_vec(),
			URL.to_vec(),
			None,
			None,
			AttestationType::Ias,
		));

		let enclave = default_enclave()
			.with_mrenclave(TEST8_MRENCLAVE)
			.with_last_seen_timestamp(TEST8_TIMESTAMP)
			.with_sgx_build_mode(SgxBuildMode::Production)
			.with_attestation_type(AttestationType::Ias);

		assert_eq!(Teebag::enclave_count(WorkerType::Identity), 1);
		assert_eq!(Teebag::enclave_count(WorkerType::BitAcross), 0);
		assert_eq!(EnclaveRegistry::<Test>::get(signer8).unwrap(), enclave);

		// remove authorized enclave should remove enclave too
		assert_ok!(Teebag::force_remove_authorized_enclave(
			RuntimeOrigin::signed(alice()),
			WorkerType::Identity,
			TEST8_MRENCLAVE
		));
		assert_eq!(Teebag::authorized_enclave(WorkerType::Identity).len(), 0);
		assert_eq!(Teebag::enclave_count(WorkerType::Identity), 0);
	})
}

#[test]
fn register_enclave_prod_fails_with_wrong_attestation_type() {
	new_test_ext(false).execute_with(|| {
		assert_noop!(
			Teebag::register_enclave(
				RuntimeOrigin::signed(alice()),
				Default::default(),
				Default::default(),
				TEST4_MRENCLAVE.to_vec(),
				URL.to_vec(),
				None,
				None,
				AttestationType::Ignore, // only allowed in dev mode
			),
			Error::<Test>::InvalidAttestationType
		);
	})
}

#[test]
fn register_enclave_prod_fails_with_no_authorized_enclave() {
	new_test_ext(false).execute_with(|| {
		Timestamp::set_timestamp(TEST4_TIMESTAMP);
		let signer = get_signer(TEST4_SIGNER_PUB);
		assert_noop!(
			Teebag::register_enclave(
				RuntimeOrigin::signed(signer),
				Default::default(),
				Default::default(),
				TEST4_CERT.to_vec(),
				URL.to_vec(),
				None,
				None,
				AttestationType::Ias,
			),
			Error::<Test>::EnclaveNotAuthorized
		);
	})
}

#[test]
fn register_enclave_prod_fails_with_max_limit_reached() {
	new_test_ext(false).execute_with(|| {
		assert_ok!(Teebag::force_add_authorized_enclave(
			RuntimeOrigin::signed(alice()),
			WorkerType::Identity,
			TEST4_MRENCLAVE
		));
		assert_ok!(Teebag::force_add_authorized_enclave(
			RuntimeOrigin::signed(alice()),
			WorkerType::Identity,
			TEST6_MRENCLAVE
		));
		assert_ok!(Teebag::force_add_authorized_enclave(
			RuntimeOrigin::signed(alice()),
			WorkerType::BitAcross,
			TEST4_MRENCLAVE
		));
		assert_ok!(Teebag::force_add_authorized_enclave(
			RuntimeOrigin::signed(alice()),
			WorkerType::BitAcross,
			TEST6_MRENCLAVE
		));

		let signer4: AccountId32 = get_signer(TEST4_SIGNER_PUB);
		let signer6: AccountId32 = get_signer(TEST6_SIGNER_PUB);

		Timestamp::set_timestamp(TEST4_TIMESTAMP);
		assert_ok!(Teebag::register_enclave(
			RuntimeOrigin::signed(signer4.clone()),
			WorkerType::BitAcross,
			Default::default(),
			TEST4_CERT.to_vec(),
			URL.to_vec(),
			None,
			None,
			AttestationType::Ias,
		));

		Timestamp::set_timestamp(TEST6_TIMESTAMP);
		assert_noop!(
			Teebag::register_enclave(
				RuntimeOrigin::signed(signer6.clone()),
				WorkerType::BitAcross,
				Default::default(),
				TEST6_CERT.to_vec(),
				URL.to_vec(),
				None,
				None,
				AttestationType::Ias,
			),
			Error::<Test>::MaxEnclaveIdentifierOverflow
		);

		// re-register them as WorkerType::Identity is not allowed
		Timestamp::set_timestamp(TEST4_TIMESTAMP);
		assert_noop!(
			Teebag::register_enclave(
				RuntimeOrigin::signed(signer4.clone()),
				WorkerType::Identity,
				Default::default(),
				TEST4_CERT.to_vec(),
				URL.to_vec(),
				None,
				None,
				AttestationType::Ias,
			),
			Error::<Test>::UnexpectedWorkerType
		);

		// remove and re-register it should work
		assert_ok!(Teebag::force_remove_enclave(RuntimeOrigin::signed(alice()), signer4.clone(),));

		assert_ok!(Teebag::register_enclave(
			RuntimeOrigin::signed(signer4),
			WorkerType::Identity,
			Default::default(),
			TEST4_CERT.to_vec(),
			URL.to_vec(),
			None,
			None,
			AttestationType::Ias,
		));

		Timestamp::set_timestamp(TEST6_TIMESTAMP);
		assert_noop!(
			Teebag::register_enclave(
				RuntimeOrigin::signed(signer6),
				WorkerType::Identity,
				Default::default(),
				TEST6_CERT.to_vec(),
				URL.to_vec(),
				None,
				None,
				AttestationType::Ias,
			),
			Error::<Test>::MaxEnclaveIdentifierOverflow
		);

		assert_eq!(Teebag::enclave_count(WorkerType::Identity), 1);
		assert_eq!(Teebag::enclave_count(WorkerType::BitAcross), 0);
	})
}

#[test]
fn register_quoting_enclave_works() {
	new_test_ext(false).execute_with(|| {
		let qe = Teebag::quoting_enclave_registry();
		assert_eq!(qe.mrsigner, [0u8; 32]);
		assert_eq!(qe.isvprodid, 0);
		Timestamp::set_timestamp(VALID_TIMESTAMP);
		register_quoting_enclave();
		let qe = Teebag::quoting_enclave_registry();
		assert_eq!(qe.isvprodid, 1);
	})
}

#[test]
fn register_tcb_info_works() {
	new_test_ext(false).execute_with(|| {
		Timestamp::set_timestamp(VALID_TIMESTAMP);

		register_tcb_info();
		let fmspc = hex!("00906EA10000");
		let tcb_info = Teebag::tcb_info(fmspc);
		// This is the date that the is registered in register_tcb_info and represents the date
		// 2023-04-16T12:45:32Z
		assert_eq!(tcb_info.next_update, 1681649132000);
	})
}
