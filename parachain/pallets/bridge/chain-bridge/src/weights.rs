// Copyright 2020-2024 Trust Computing GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_chain_bridge
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-28, STEPS: `20`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `azure-dev-1`, CPU: `Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("litentry-dev"), DB CACHE: 20

// Executed Command:
// ./target/release/heima-node
// benchmark
// pallet
// --chain=litentry-dev
// --execution=wasm
// --db-cache=20
// --wasm-execution=compiled
// --pallet=pallet_chain_bridge
// --extrinsic=*
// --heap-pages=4096
// --steps=20
// --repeat=50
// --header=./LICENSE_HEADER
// --template=./templates/benchmark/pallet-weight-template.hbs
// --output=./pallets/bridge/chain-bridge/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_chain_bridge.
pub trait WeightInfo {
	fn set_threshold() -> Weight;
	fn whitelist_chain() -> Weight;
	fn add_relayer() -> Weight;
	fn remove_relayer() -> Weight;
	fn acknowledge_proposal() -> Weight;
	fn reject_proposal() -> Weight;
	fn eval_vote_state() -> Weight;
}

/// Weights for pallet_chain_bridge using the Substrate node and recommended hardware.
pub struct LitentryWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for LitentryWeight<T> {
	/// Storage: `ChainBridge::RelayerThreshold` (r:0 w:1)
	/// Proof: `ChainBridge::RelayerThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_474_000 picoseconds.
		Weight::from_parts(9_857_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ChainBridge::ChainNonces` (r:1 w:1)
	/// Proof: `ChainBridge::ChainNonces` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn whitelist_chain() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `3607`
		// Minimum execution time: 13_428_000 picoseconds.
		Weight::from_parts(13_849_000, 3607)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ChainBridge::Relayers` (r:1 w:1)
	/// Proof: `ChainBridge::Relayers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerCount` (r:1 w:1)
	/// Proof: `ChainBridge::RelayerCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_relayer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `3607`
		// Minimum execution time: 16_156_000 picoseconds.
		Weight::from_parts(16_486_000, 3607)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ChainBridge::Relayers` (r:1 w:1)
	/// Proof: `ChainBridge::Relayers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerCount` (r:1 w:1)
	/// Proof: `ChainBridge::RelayerCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_relayer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `3688`
		// Minimum execution time: 18_575_000 picoseconds.
		Weight::from_parts(18_810_000, 3688)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ChainBridge::Relayers` (r:1 w:0)
	/// Proof: `ChainBridge::Relayers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::ChainNonces` (r:1 w:0)
	/// Proof: `ChainBridge::ChainNonces` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::Votes` (r:1 w:1)
	/// Proof: `ChainBridge::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerThreshold` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerCount` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn acknowledge_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `3750`
		// Minimum execution time: 44_397_000 picoseconds.
		Weight::from_parts(45_191_000, 3750)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ChainBridge::Relayers` (r:1 w:0)
	/// Proof: `ChainBridge::Relayers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::ChainNonces` (r:1 w:0)
	/// Proof: `ChainBridge::ChainNonces` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::Votes` (r:1 w:1)
	/// Proof: `ChainBridge::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerThreshold` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerCount` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn reject_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `3750`
		// Minimum execution time: 37_384_000 picoseconds.
		Weight::from_parts(37_828_000, 3750)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ChainBridge::Votes` (r:1 w:1)
	/// Proof: `ChainBridge::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerThreshold` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerCount` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn eval_vote_state() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451`
		//  Estimated: `3916`
		// Minimum execution time: 17_451_000 picoseconds.
		Weight::from_parts(17_841_000, 3916)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `ChainBridge::RelayerThreshold` (r:0 w:1)
	/// Proof: `ChainBridge::RelayerThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_474_000 picoseconds.
		Weight::from_parts(9_857_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ChainBridge::ChainNonces` (r:1 w:1)
	/// Proof: `ChainBridge::ChainNonces` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn whitelist_chain() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `3607`
		// Minimum execution time: 13_428_000 picoseconds.
		Weight::from_parts(13_849_000, 3607)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ChainBridge::Relayers` (r:1 w:1)
	/// Proof: `ChainBridge::Relayers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerCount` (r:1 w:1)
	/// Proof: `ChainBridge::RelayerCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_relayer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `3607`
		// Minimum execution time: 16_156_000 picoseconds.
		Weight::from_parts(16_486_000, 3607)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ChainBridge::Relayers` (r:1 w:1)
	/// Proof: `ChainBridge::Relayers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerCount` (r:1 w:1)
	/// Proof: `ChainBridge::RelayerCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_relayer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `3688`
		// Minimum execution time: 18_575_000 picoseconds.
		Weight::from_parts(18_810_000, 3688)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ChainBridge::Relayers` (r:1 w:0)
	/// Proof: `ChainBridge::Relayers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::ChainNonces` (r:1 w:0)
	/// Proof: `ChainBridge::ChainNonces` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::Votes` (r:1 w:1)
	/// Proof: `ChainBridge::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerThreshold` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerCount` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn acknowledge_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `3750`
		// Minimum execution time: 44_397_000 picoseconds.
		Weight::from_parts(45_191_000, 3750)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ChainBridge::Relayers` (r:1 w:0)
	/// Proof: `ChainBridge::Relayers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::ChainNonces` (r:1 w:0)
	/// Proof: `ChainBridge::ChainNonces` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::Votes` (r:1 w:1)
	/// Proof: `ChainBridge::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerThreshold` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerCount` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn reject_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `3750`
		// Minimum execution time: 37_384_000 picoseconds.
		Weight::from_parts(37_828_000, 3750)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ChainBridge::Votes` (r:1 w:1)
	/// Proof: `ChainBridge::Votes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerThreshold` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerThreshold` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainBridge::RelayerCount` (r:1 w:0)
	/// Proof: `ChainBridge::RelayerCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn eval_vote_state() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451`
		//  Estimated: `3916`
		// Minimum execution time: 17_451_000 picoseconds.
		Weight::from_parts(17_841_000, 3916)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
