// Copyright 2020-2024 Trust Computing GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_identity_management`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-28, STEPS: `20`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `litentry-benchmark-server`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("rococo-dev")`, DB CACHE: 20

// Executed Command:
// ./litentry-collator
// benchmark
// pallet
// --chain=rococo-dev
// --execution=wasm
// --db-cache=20
// --wasm-execution=compiled
// --pallet=pallet_identity_management
// --extrinsic=*
// --heap-pages=4096
// --steps=20
// --repeat=50
// --header=./LICENSE_HEADER
// --output=./runtime/rococo/src/weights/pallet_identity_management.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_identity_management`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity_management::WeightInfo for WeightInfo<T> {
	/// Storage: `IdentityManagement::Delegatee` (r:0 w:1)
	/// Proof: `IdentityManagement::Delegatee` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn add_delegatee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_549_000 picoseconds.
		Weight::from_parts(8_919_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `IdentityManagement::Delegatee` (r:1 w:1)
	/// Proof: `IdentityManagement::Delegatee` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn remove_delegatee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `116`
		//  Estimated: `3513`
		// Minimum execution time: 12_876_000 picoseconds.
		Weight::from_parts(13_453_000, 0)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `IMPExtrinsicWhitelist::GroupControlOn` (r:1 w:0)
	/// Proof: `IMPExtrinsicWhitelist::GroupControlOn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn link_identity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `1627`
		// Minimum execution time: 15_759_000 picoseconds.
		Weight::from_parts(16_281_000, 0)
			.saturating_add(Weight::from_parts(0, 1627))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `IMPExtrinsicWhitelist::GroupControlOn` (r:1 w:0)
	/// Proof: `IMPExtrinsicWhitelist::GroupControlOn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn deactivate_identity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `1627`
		// Minimum execution time: 11_564_000 picoseconds.
		Weight::from_parts(12_013_000, 0)
			.saturating_add(Weight::from_parts(0, 1627))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `IMPExtrinsicWhitelist::GroupControlOn` (r:1 w:0)
	/// Proof: `IMPExtrinsicWhitelist::GroupControlOn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn activate_identity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `1627`
		// Minimum execution time: 11_785_000 picoseconds.
		Weight::from_parts(12_083_000, 0)
			.saturating_add(Weight::from_parts(0, 1627))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:0)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn identity_linked() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347`
		//  Estimated: `3812`
		// Minimum execution time: 12_364_000 picoseconds.
		Weight::from_parts(13_195_000, 0)
			.saturating_add(Weight::from_parts(0, 3812))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:0)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn identity_deactivated() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347`
		//  Estimated: `3812`
		// Minimum execution time: 12_490_000 picoseconds.
		Weight::from_parts(12_958_000, 0)
			.saturating_add(Weight::from_parts(0, 3812))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:0)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn identity_activated() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347`
		//  Estimated: `3812`
		// Minimum execution time: 12_481_000 picoseconds.
		Weight::from_parts(12_928_000, 0)
			.saturating_add(Weight::from_parts(0, 3812))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:0)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn identity_networks_set() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347`
		//  Estimated: `3812`
		// Minimum execution time: 12_392_000 picoseconds.
		Weight::from_parts(12_997_000, 0)
			.saturating_add(Weight::from_parts(0, 3812))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:0)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn some_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347`
		//  Estimated: `3812`
		// Minimum execution time: 12_290_000 picoseconds.
		Weight::from_parts(12_662_000, 0)
			.saturating_add(Weight::from_parts(0, 3812))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
