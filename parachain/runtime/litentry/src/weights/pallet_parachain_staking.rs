// Copyright 2020-2024 Trust Computing GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-08-28, STEPS: `25`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `litentry-benchmark-server`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("litentry-dev")`, DB CACHE: 20

// Executed Command:
// ./litentry-collator
// benchmark
// pallet
// --chain=litentry-dev
// --execution=wasm
// --db-cache=20
// --wasm-execution=compiled
// --pallet=pallet_parachain_staking
// --extrinsic=*
// --heap-pages=4096
// --steps=25
// --repeat=20
// --header=./LICENSE_HEADER
// --output=./runtime/litentry/src/weights/pallet_parachain_staking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_parachain_staking::WeightInfo for WeightInfo<T> {
	/// Storage: `ParachainStaking::Candidates` (r:1 w:1)
	/// Proof: `ParachainStaking::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 100]`.
	fn add_candidates_whitelist(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `337 + x * (32 ±0)`
		//  Estimated: `1826 + x * (32 ±0)`
		// Minimum execution time: 11_811_000 picoseconds.
		Weight::from_parts(13_741_758, 0)
			.saturating_add(Weight::from_parts(0, 1826))
			// Standard Error: 3_183
			.saturating_add(Weight::from_parts(160_091, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::Candidates` (r:1 w:1)
	/// Proof: `ParachainStaking::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 100]`.
	fn remove_candidates_whitelist(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369 + x * (32 ±0)`
		//  Estimated: `1859 + x * (32 ±0)`
		// Minimum execution time: 11_637_000 picoseconds.
		Weight::from_parts(15_327_496, 0)
			.saturating_add(Weight::from_parts(0, 1859))
			// Standard Error: 4_386
			.saturating_add(Weight::from_parts(127_134, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_staking_expectations() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `466`
		//  Estimated: `1951`
		// Minimum execution time: 12_310_000 picoseconds.
		Weight::from_parts(12_744_000, 0)
			.saturating_add(Weight::from_parts(0, 1951))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_inflation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `502`
		//  Estimated: `1987`
		// Minimum execution time: 42_386_000 picoseconds.
		Weight::from_parts(43_165_000, 0)
			.saturating_add(Weight::from_parts(0, 1987))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434`
		//  Estimated: `1919`
		// Minimum execution time: 12_324_000 picoseconds.
		Weight::from_parts(12_777_000, 0)
			.saturating_add(Weight::from_parts(0, 1919))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_parachain_bond_reserve_percent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434`
		//  Estimated: `1919`
		// Minimum execution time: 11_883_000 picoseconds.
		Weight::from_parts(12_691_000, 0)
			.saturating_add(Weight::from_parts(0, 1919))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_total_selected() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `442`
		//  Estimated: `1927`
		// Minimum execution time: 13_387_000 picoseconds.
		Weight::from_parts(14_016_000, 0)
			.saturating_add(Weight::from_parts(0, 1927))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
	/// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_collator_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `405`
		//  Estimated: `1890`
		// Minimum execution time: 10_645_000 picoseconds.
		Weight::from_parts(11_363_000, 0)
			.saturating_add(Weight::from_parts(0, 1890))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `530`
		//  Estimated: `2015`
		// Minimum execution time: 18_882_000 picoseconds.
		Weight::from_parts(19_306_000, 0)
			.saturating_add(Weight::from_parts(0, 2015))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::Candidates` (r:1 w:0)
	/// Proof: `ParachainStaking::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:0 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 1000]`.
	fn join_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1512 + x * (80 ±0)`
		//  Estimated: `4815 + x * (81 ±0)`
		// Minimum execution time: 47_961_000 picoseconds.
		Weight::from_parts(47_529_513, 0)
			.saturating_add(Weight::from_parts(0, 4815))
			// Standard Error: 3_197
			.saturating_add(Weight::from_parts(177_996, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 81).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 1000]`.
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1327 + x * (48 ±0)`
		//  Estimated: `4691 + x * (49 ±0)`
		// Minimum execution time: 22_542_000 picoseconds.
		Weight::from_parts(24_109_295, 0)
			.saturating_add(Weight::from_parts(0, 4691))
			// Standard Error: 2_097
			.saturating_add(Weight::from_parts(120_102, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 49).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1200 w:1200)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1199 w:1199)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 1200]`.
	fn execute_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `469 + x * (447 ±0)`
		//  Estimated: `5094 + x * (2915 ±0)`
		// Minimum execution time: 108_720_000 picoseconds.
		Weight::from_parts(117_004_000, 0)
			.saturating_add(Weight::from_parts(0, 5094))
			// Standard Error: 765_495
			.saturating_add(Weight::from_parts(65_933_118, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2915).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[3, 1000]`.
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1247 + x * (48 ±0)`
		//  Estimated: `4611 + x * (49 ±0)`
		// Minimum execution time: 19_955_000 picoseconds.
		Weight::from_parts(18_765_298, 0)
			.saturating_add(Weight::from_parts(0, 4611))
			// Standard Error: 2_060
			.saturating_add(Weight::from_parts(128_934, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 49).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn go_offline() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `686`
		//  Estimated: `4151`
		// Minimum execution time: 19_637_000 picoseconds.
		Weight::from_parts(20_988_000, 0)
			.saturating_add(Weight::from_parts(0, 4151))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn go_online() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `637`
		//  Estimated: `4102`
		// Minimum execution time: 19_280_000 picoseconds.
		Weight::from_parts(20_712_000, 0)
			.saturating_add(Weight::from_parts(0, 4102))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn candidate_bond_more() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `829`
		//  Estimated: `4294`
		// Minimum execution time: 36_772_000 picoseconds.
		Weight::from_parts(38_539_000, 0)
			.saturating_add(Weight::from_parts(0, 4294))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `598`
		//  Estimated: `4063`
		// Minimum execution time: 18_215_000 picoseconds.
		Weight::from_parts(19_334_000, 0)
			.saturating_add(Weight::from_parts(0, 4063))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `918`
		//  Estimated: `4383`
		// Minimum execution time: 62_332_000 picoseconds.
		Weight::from_parts(71_092_000, 0)
			.saturating_add(Weight::from_parts(0, 4383))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `4047`
		// Minimum execution time: 15_060_000 picoseconds.
		Weight::from_parts(16_242_000, 0)
			.saturating_add(Weight::from_parts(0, 4047))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn schedule_leave_delegators() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `595`
		//  Estimated: `4060`
		// Minimum execution time: 21_205_000 picoseconds.
		Weight::from_parts(22_334_000, 0)
			.saturating_add(Weight::from_parts(0, 4060))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:99 w:99)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:99 w:99)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:99 w:99)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:99 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ScoreStaking::Scores` (r:1 w:0)
	/// Proof: `ScoreStaking::Scores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[2, 100]`.
	fn execute_leave_delegators(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1008 + x * (458 ±0)`
		//  Estimated: `5061 + x * (2852 ±3)`
		// Minimum execution time: 100_642_000 picoseconds.
		Weight::from_parts(110_250_000, 0)
			.saturating_add(Weight::from_parts(0, 5061))
			// Standard Error: 362_818
			.saturating_add(Weight::from_parts(43_515_638, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2852).saturating_mul(x.into()))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_leave_delegators() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `720`
		//  Estimated: `4185`
		// Minimum execution time: 23_274_000 picoseconds.
		Weight::from_parts(24_750_000, 0)
			.saturating_add(Weight::from_parts(0, 4185))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_revoke_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `595`
		//  Estimated: `4060`
		// Minimum execution time: 21_622_000 picoseconds.
		Weight::from_parts(30_151_000, 0)
			.saturating_add(Weight::from_parts(0, 4060))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn delegator_bond_more() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1217`
		//  Estimated: `4682`
		// Minimum execution time: 55_029_000 picoseconds.
		Weight::from_parts(56_470_000, 0)
			.saturating_add(Weight::from_parts(0, 4682))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_delegator_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `595`
		//  Estimated: `4060`
		// Minimum execution time: 21_237_000 picoseconds.
		Weight::from_parts(22_855_000, 0)
			.saturating_add(Weight::from_parts(0, 4060))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ScoreStaking::Scores` (r:1 w:0)
	/// Proof: `ScoreStaking::Scores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_revoke_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1596`
		//  Estimated: `5061`
		// Minimum execution time: 102_040_000 picoseconds.
		Weight::from_parts(112_648_000, 0)
			.saturating_add(Weight::from_parts(0, 5061))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1375`
		//  Estimated: `4840`
		// Minimum execution time: 84_994_000 picoseconds.
		Weight::from_parts(91_958_000, 0)
			.saturating_add(Weight::from_parts(0, 4840))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_revoke_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `720`
		//  Estimated: `4185`
		// Minimum execution time: 21_240_000 picoseconds.
		Weight::from_parts(21_922_000, 0)
			.saturating_add(Weight::from_parts(0, 4185))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_delegator_bond_less() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `753`
		//  Estimated: `4218`
		// Minimum execution time: 41_272_000 picoseconds.
		Weight::from_parts(44_089_000, 0)
			.saturating_add(Weight::from_parts(0, 4218))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:1)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Staked` (r:1 w:2)
	/// Proof: `ParachainStaking::Staked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
	/// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `AssetsHandler::ExternalBalances` (r:1 w:0)
	/// Proof: `AssetsHandler::ExternalBalances` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:0)
	/// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CollatorCommission` (r:1 w:0)
	/// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	/// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:99 w:0)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:99 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:99 w:0)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:99 w:0)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:0)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:2 w:1)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:1 w:100)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelayedPayouts` (r:0 w:1)
	/// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[8, 100]`.
	/// The range of component `y` is `[0, 5000]`.
	fn round_transition_on_initialize(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4347 + x * (297 ±0) + y * (47 ±0)`
		//  Estimated: `519520 + x * (2390 ±43) + y * (46 ±0)`
		// Minimum execution time: 840_211_000 picoseconds.
		Weight::from_parts(4_369_602_911, 0)
			.saturating_add(Weight::from_parts(0, 519520))
			.saturating_add(T::DbWeight::get().reads(214))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(207))
			.saturating_add(Weight::from_parts(0, 2390).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 46).saturating_mul(y.into()))
	}
	/// Storage: `ParachainStaking::DelayedPayouts` (r:1 w:0)
	/// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Points` (r:1 w:0)
	/// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AwardedPts` (r:2 w:1)
	/// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AtStake` (r:1 w:1)
	/// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1001 w:1001)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `y` is `[0, 1000]`.
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `399 + y * (185 ±0)`
		//  Estimated: `6424 + y * (2603 ±0)`
		// Minimum execution time: 41_416_000 picoseconds.
		Weight::from_parts(42_703_000, 0)
			.saturating_add(Weight::from_parts(0, 6424))
			// Standard Error: 41_570
			.saturating_add(Weight::from_parts(22_173_464, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(y.into()))
	}
	/// Storage: `ParachainStaking::Round` (r:1 w:0)
	/// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn base_on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `447`
		//  Estimated: `1932`
		// Minimum execution time: 4_617_000 picoseconds.
		Weight::from_parts(4_839_000, 0)
			.saturating_add(Weight::from_parts(0, 1932))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 100]`.
	fn set_auto_compound(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1273 + x * (33 ±0) + y * (48 ±0)`
		//  Estimated: `4574 + x * (34 ±0) + y * (49 ±0)`
		// Minimum execution time: 32_532_000 picoseconds.
		Weight::from_parts(39_460_890, 0)
			.saturating_add(Weight::from_parts(0, 4574))
			// Standard Error: 2_143
			.saturating_add(Weight::from_parts(92_090, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 34).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 49).saturating_mul(y.into()))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 1200]`.
	/// The range of component `y` is `[0, 1200]`.
	/// The range of component `z` is `[0, 100]`.
	fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (81 ±0) + y * (33 ±0) + z * (55 ±0)`
		//  Estimated: `21773 + x * (82 ±0) + y * (31 ±0) + z * (29 ±2)`
		// Minimum execution time: 91_154_000 picoseconds.
		Weight::from_parts(93_193_000, 0)
			.saturating_add(Weight::from_parts(0, 21773))
			// Standard Error: 1_898
			.saturating_add(Weight::from_parts(49_995, 0).saturating_mul(x.into()))
			// Standard Error: 1_898
			.saturating_add(Weight::from_parts(55_540, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 82).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 31).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 29).saturating_mul(z.into()))
	}
}
