// Copyright 2020-2024 Trust Computing GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_teebag`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-11-06, STEPS: `20`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `litentry-benchmark-server`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("litentry-dev")`, DB CACHE: 20

// Executed Command:
// ./litentry-collator
// benchmark
// pallet
// --chain=litentry-dev
// --execution=wasm
// --db-cache=20
// --wasm-execution=compiled
// --pallet=pallet_teebag
// --extrinsic=*
// --heap-pages=4096
// --steps=20
// --repeat=50
// --header=./LICENSE_HEADER
// --output=./runtime/litentry/src/weights/pallet_teebag.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_teebag`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_teebag::WeightInfo for WeightInfo<T> {
	/// Storage: `Teebag::Mode` (r:1 w:0)
	/// Proof: `Teebag::Mode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:1)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveIdentifier` (r:1 w:1)
	/// Proof: `Teebag::EnclaveIdentifier` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_add_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `3688`
		// Minimum execution time: 29_614_000 picoseconds.
		Weight::from_parts(32_615_000, 0)
			.saturating_add(Weight::from_parts(0, 3688))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:1)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveIdentifier` (r:1 w:1)
	/// Proof: `Teebag::EnclaveIdentifier` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_remove_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `541`
		//  Estimated: `4006`
		// Minimum execution time: 32_658_000 picoseconds.
		Weight::from_parts(35_491_000, 0)
			.saturating_add(Weight::from_parts(0, 4006))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:4 w:3)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveIdentifier` (r:1 w:1)
	/// Proof: `Teebag::EnclaveIdentifier` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_remove_enclave_by_mrenclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `720`
		//  Estimated: `11610`
		// Minimum execution time: 82_725_000 picoseconds.
		Weight::from_parts(83_973_000, 0)
			.saturating_add(Weight::from_parts(0, 11610))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:4 w:3)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveIdentifier` (r:1 w:1)
	/// Proof: `Teebag::EnclaveIdentifier` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_remove_enclave_by_worker_type() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `720`
		//  Estimated: `11610`
		// Minimum execution time: 82_046_000 picoseconds.
		Weight::from_parts(83_365_000, 0)
			.saturating_add(Weight::from_parts(0, 11610))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Teebag::AuthorizedEnclave` (r:1 w:1)
	/// Proof: `Teebag::AuthorizedEnclave` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_add_authorized_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `383`
		//  Estimated: `3848`
		// Minimum execution time: 24_573_000 picoseconds.
		Weight::from_parts(25_209_000, 0)
			.saturating_add(Weight::from_parts(0, 3848))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Teebag::AuthorizedEnclave` (r:1 w:1)
	/// Proof: `Teebag::AuthorizedEnclave` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:0)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_remove_authorized_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `415`
		//  Estimated: `3880`
		// Minimum execution time: 33_816_000 picoseconds.
		Weight::from_parts(34_720_000, 0)
			.saturating_add(Weight::from_parts(0, 3880))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teebag::Mode` (r:1 w:0)
	/// Proof: `Teebag::Mode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::AuthorizedEnclave` (r:1 w:1)
	/// Proof: `Teebag::AuthorizedEnclave` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:1)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveIdentifier` (r:1 w:1)
	/// Proof: `Teebag::EnclaveIdentifier` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_enclave_with_ias_attestation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `390`
		//  Estimated: `3855`
		// Minimum execution time: 2_556_526_000 picoseconds.
		Weight::from_parts(2_580_605_000, 0)
			.saturating_add(Weight::from_parts(0, 3855))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teebag::QuotingEnclaveRegistry` (r:1 w:0)
	/// Proof: `Teebag::QuotingEnclaveRegistry` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::TcbInfo` (r:1 w:0)
	/// Proof: `Teebag::TcbInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::Mode` (r:1 w:0)
	/// Proof: `Teebag::Mode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::AuthorizedEnclave` (r:1 w:1)
	/// Proof: `Teebag::AuthorizedEnclave` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:1)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveIdentifier` (r:1 w:1)
	/// Proof: `Teebag::EnclaveIdentifier` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_enclave_with_dcap_attestation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `607`
		//  Estimated: `4072`
		// Minimum execution time: 4_616_182_000 picoseconds.
		Weight::from_parts(4_628_112_000, 0)
			.saturating_add(Weight::from_parts(0, 4072))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:1)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::EnclaveIdentifier` (r:1 w:1)
	/// Proof: `Teebag::EnclaveIdentifier` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unregister_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `3923`
		// Minimum execution time: 35_511_000 picoseconds.
		Weight::from_parts(36_246_000, 0)
			.saturating_add(Weight::from_parts(0, 3923))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teebag::QuotingEnclaveRegistry` (r:0 w:1)
	/// Proof: `Teebag::QuotingEnclaveRegistry` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn register_quoting_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `94`
		//  Estimated: `1493`
		// Minimum execution time: 2_295_431_000 picoseconds.
		Weight::from_parts(2_322_999_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teebag::TcbInfo` (r:0 w:1)
	/// Proof: `Teebag::TcbInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_tcb_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `94`
		//  Estimated: `1493`
		// Minimum execution time: 2_510_793_000 picoseconds.
		Weight::from_parts(2_542_290_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn post_opaque_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_426_000 picoseconds.
		Weight::from_parts(14_889_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:0)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn parentchain_block_processed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `407`
		//  Estimated: `3872`
		// Minimum execution time: 30_217_000 picoseconds.
		Weight::from_parts(31_056_000, 0)
			.saturating_add(Weight::from_parts(0, 3872))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `Teebag::EnclaveRegistry` (r:1 w:0)
	/// Proof: `Teebag::EnclaveRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teebag::EnclaveIdentifier` (r:1 w:0)
	/// Proof: `Teebag::EnclaveIdentifier` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::SidechainBlockFinalizationCandidate` (r:1 w:1)
	/// Proof: `Teebag::SidechainBlockFinalizationCandidate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teebag::LatestSidechainBlockConfirmation` (r:0 w:1)
	/// Proof: `Teebag::LatestSidechainBlockConfirmation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn sidechain_block_imported() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `3993`
		// Minimum execution time: 45_814_000 picoseconds.
		Weight::from_parts(46_892_000, 0)
			.saturating_add(Weight::from_parts(0, 3993))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Teebag::EnclaveIdentifier` (r:1 w:1)
	/// Proof: `Teebag::EnclaveIdentifier` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_enclave_identifier() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213`
		//  Estimated: `3678`
		// Minimum execution time: 12_886_000 picoseconds.
		Weight::from_parts(13_373_000, 0)
			.saturating_add(Weight::from_parts(0, 3678))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
